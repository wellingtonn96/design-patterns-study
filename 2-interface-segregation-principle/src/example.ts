/**
 * üìñ EXEMPLO DE USO - Interface Segregation Principle (ISP)
 * 
 * Este arquivo demonstra como aplicar o ISP em diferentes m√©todos de pagamento,
 * mostrando como interfaces espec√≠ficas s√£o melhores que uma interface geral.
 */

import { CreditCard } from "./credit-card";
import { Boleto } from "./boleto";
import { Pix } from "./pix";

/**
 * Fun√ß√£o que demonstra pagamento com cart√£o de cr√©dito
 */
function demonstrateCreditCard(): void {
    console.log("\nüí≥ === DEMONSTRANDO CART√ÉO DE CR√âDITO ===");
    
    const creditCard = new CreditCard();
    
    // Processar pagamento
    creditCard.pay(150.00, "Compra online - E-commerce");
    
    // Gerar comprovante (implementa IGenerateDocument)
    creditCard.generateDocument(150.00, "Compra online - E-commerce");
    
    console.log("‚úÖ Cart√£o de cr√©dito: Implementa IPaymentMethod + IGenerateDocument");
    console.log("‚ùå Cart√£o de cr√©dito: N√ÉO implementa IGenerateQrCode (n√£o precisa)");
}

/**
 * Fun√ß√£o que demonstra pagamento com boleto
 */
function demonstrateBoleto(): void {
    console.log("\nüßæ === DEMONSTRANDO BOLETO ===");
    
    const boleto = new Boleto();
    
    // Processar pagamento
    boleto.pay(200.00, "Pagamento de conta - Servi√ßos");
    
    // Gerar boleto (implementa IGenerateDocument)
    boleto.generateDocument(200.00, "Pagamento de conta - Servi√ßos");
    
    console.log("‚úÖ Boleto: Implementa IPaymentMethod + IGenerateDocument");
    console.log("‚ùå Boleto: N√ÉO implementa IGenerateQrCode (n√£o precisa)");
}

/**
 * Fun√ß√£o que demonstra pagamento com PIX
 */
function demonstratePix(): void {
    console.log("\nüì± === DEMONSTRANDO PIX ===");
    
    const pix = new Pix();
    
    // Processar pagamento
    pix.pay(75.50, "Transfer√™ncia PIX - Amigo");
    
    // Gerar QR Code (implementa IGenerateQrCode)
    pix.generateQrCode(75.50, "Transfer√™ncia PIX - Amigo");
    
    console.log("‚úÖ PIX: Implementa IPaymentMethod + IGenerateQrCode");
    console.log("‚ùå PIX: N√ÉO implementa IGenerateDocument (n√£o precisa)");
}

/**
 * Fun√ß√£o que demonstra o problema de violar o ISP
 */
function demonstrateViolation(): void {
    console.log("\n‚ö†Ô∏è === DEMONSTRANDO VIOLA√á√ÉO DO ISP ===");
    
    console.log("‚ùå PROBLEMA: Interface monol√≠tica");
    console.log(`
interface IPaymentMethod {
    pay(): void;
    generateDocument(): void;  // Cart√£o e Boleto precisam
    generateQrCode(): void;    // Apenas PIX precisa
}
    `);
    
    console.log("‚úÖ SOLU√á√ÉO: Interfaces segregadas");
    console.log(`
interface IPaymentMethod {
    pay(): void;
}

interface IGenerateDocument {
    generateDocument(): void;
}

interface IGenerateQrCode {
    generateQrCode(): void;
}
    `);
    
    console.log("üí° Benef√≠cio: Cada classe implementa apenas o que precisa!");
}

/**
 * Fun√ß√£o que demonstra os benef√≠cios do ISP
 */
function demonstrateBenefits(): void {
    console.log("\nüéØ === BENEF√çCIOS DO ISP ===");
    
    console.log("‚úÖ 1. Flexibilidade:");
    console.log("   - Cart√£o de cr√©dito n√£o √© for√ßado a gerar QR Code");
    console.log("   - PIX n√£o √© for√ßado a gerar documento tradicional");
    console.log("   - Boleto n√£o √© for√ßado a gerar QR Code");
    
    console.log("\n‚úÖ 2. Manutenibilidade:");
    console.log("   - Mudan√ßas em uma interface n√£o afetam outras");
    console.log("   - Adicionar novos m√©todos n√£o quebra implementa√ß√µes existentes");
    
    console.log("\n‚úÖ 3. Testabilidade:");
    console.log("   - Testes mais espec√≠ficos e focados");
    console.log("   - Mocks mais simples e precisos");
    
    console.log("\n‚úÖ 4. Extensibilidade:");
    console.log("   - Novos m√©todos de pagamento podem implementar apenas o necess√°rio");
    console.log("   - Novas funcionalidades podem ser adicionadas sem afetar o existente");
}

/**
 * Fun√ß√£o principal que executa todos os exemplos
 */
function main(): void {
    console.log("üéØ EXEMPLOS - Interface Segregation Principle (ISP)");
    console.log("=" .repeat(60));
    
    // Executar exemplos
    demonstrateCreditCard();
    demonstrateBoleto();
    demonstratePix();
    demonstrateViolation();
    demonstrateBenefits();
    
    console.log("\n" + "=" .repeat(60));
    console.log("‚úÖ Todos os exemplos executados com sucesso!");
    console.log("\nüí° Princ√≠pio demonstrado:");
    console.log("   - Muitas interfaces espec√≠ficas s√£o melhores que uma interface geral");
    console.log("   - Classes n√£o devem ser for√ßadas a implementar m√©todos que n√£o usam");
    console.log("   - Interfaces devem ser coesas e focadas em uma responsabilidade");
}

export {
    demonstrateCreditCard,
    demonstrateBoleto,
    demonstratePix,
    demonstrateViolation,
    demonstrateBenefits,
    main
};

// Executar a fun√ß√£o principal quando o arquivo for executado
main(); 